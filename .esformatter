{
    "preset": "default",

    "plugins": [
        "esformatter-jsx",
        "esformatter-quotes",
        //"esformatter-semicolons",
        "esformatter-literal-notation",
        "esformatter-parseint",
        "esformatter-spaced-lined-comment",
        "esformatter-var-each",
        "esformatter-collapse-objects",
        "esformatter-remove-trailing-commas",
        "esformatter-quote-props"
    ],

    "jsx": {
        "formatJSX": true, //Duh! that's the default
        "attrsOnSameLineAsTag": false, // move each attribute to its own line
        "maxAttrsOnTag": 1, // if lower or equal than 3 attributes, they will be kept on a single line
        "firstAttributeOnSameLine": false, // keep the first attribute in the same line as the tag
        "formatJSXExpressions": false, // default true, if false jsxExpressions won't be recursively formatted
        "JSXExpressionsSingleLine": true, // default true, if false the JSXExpressions might span several lines
        "alignWithFirstAttribute": false, // do not align attributes with the first tag
        "spaceInJSXExpressionContainers": "", // default to one space. Make it empty if you don't like spaces between JSXExpressionContainers
        "removeSpaceBeforeClosingJSX": false, // default false. if true <React.Something /> => <React.Something/>
        "closingTagOnNewLine": true, // default false. if true attributes on multiple lines will close the tag on a new line
        "JSXAttributeQuotes": "single", // possible values "single" or "double". Leave it as empty string if you don't want to modify the attributes' quotes
        "htmlOptions": {
            //put here the options for js-beautify.html
            "brace_style": "collapse",
            "indent_char": " ",
            "indent_size": 2,
            "max_preserve_newlines": 2,
            "preserve_newlines": true
        }
    },

    "quotes": {
        "type": "single"
    },

    "lineBreak": {
        "before": {

        },
        "after": {
            "ObjectExpressionOpeningBrace": 1,
            "ModuleSpecifierClosingBrace": 1
        }
    },

    "whiteSpace": {
        "before": {
            "ObjectExpressionClosingBrace": 0,
            "ModuleSpecifierClosingBrace": 0,
            "PropertyName": 1
        },
        "after": {
            "ObjectExpressionOpeningBrace": 0,
            "ModuleSpecifierOpeningBrace": 0
        }
    }
}
